System.out.println 앞으로 사용 금지
WHY?
->



logging 사용 이유 : 개발시 의도한대로 동작하고 있는지 검사
예) 웹브라우저를 통해서 server로 요청(localhost.basicServlet) 
     doGet메소드가 호출이 되었는지 로그를 통해 확인

     파라미터가 의도한대로 서블릿한테 전달이 되었는지 확인
     

logging과 비슷한 목적으로 사용하는 것 : 디버깅 (***잘알아야함)
-로깅이 디버깅보다 좀 더 light함


log level 설정에 따른 logger 메소드 동작여부
->

로깅 문자열 결합을 피하기 위한 방법
->

WHY? 왜 문자열 결합을 피해야하나? 
->



==========================================================================


다시 basic Servlet

	Servlet vs JSP(12/22) 
	- Servlet :  자바 코드안에 html코드를 삽입
	
	생기는 문제점 
	1. html 코드들이 문자 취급되기 때문에 오타를 발견하기가 어려움
	
	2. 협업의 문제점
		java - 프로그래머
		html - 디자이너
		
	3. 결국 이걸 개발자가 다해야하는데, 그럴순없지
	
		개발자가 코드를 리딩하는게 가독성의 문제
		==> 디자이너가 html코드를 수정하려면 자바소스를 까야 수정이 가능함. 그럼 이클립스도 깔아야하고...
		이래서 나온게 jsp!!!!!
		
		!!!!!!!!!!!!!JSP와 SERVLET는 동일한 기능을 한다!!!!!!!!!!!!!!
		
		jsp는 화면구성에 사용 ( 좀더 디자이너친화된 애)
		
		서블릿은 로직처리시에 사용하는거고
		jsp는 화면 구성에 좀더 치우쳐서
		
		
	
	- JSP : html문서 안에 자바코드
	
	
	1229
	
	1. jsp는 servlet으로 변환된어 서비스 된다.
	2. servlet-container(tomcat)이 jsp를 서블릿으로 변환하는 과정에서 사용하는 폴도는 work폴더
		- tomcat도 개발자가 만든 프로그램으로 비정상적으로 동작할 때가 있음
		- 개발자가 jsp파일을 수정하였음에도 수정 내역이 반영되지 않을 경우, work 폴더에 생성된 jsp 	변환 파일들(java, class)을 삭제해주면 새롭게 만들어준다.
	3. jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어났을 경우에 변환
		- 서블릿으로 생성이 된 이후 같은 파일에 대한 요청은 이미 변환된 파일로 서비스
		
		
	jsp 구성요소
	1. 지시자(%@) : page에 대한 설정 정보를 말한다. - 주로 쓰는건 import밖에 없지, 그거랑 language!
	2. 스크립틀릿(%) : java 코드가 들어감 ==> JSTL이라는 애로 나중에 바꿀거야. JSTL(Java Standard Tag Library)
	3. 표현식(%=) : 문자열로 출력 ==> EL(Expression Language, 표현언어)
	4. 주석
	5. 선언부(쓸일이 없음)
		- 변수나 메소드 선언하는 부분
		- jsp는 화면 컨텐츠를 생성하는 역할(화면을 그려내는 애)
		- 근데 변수가 메소드는 로직 처리시 주로 사용 그래서 여기선 선언부를 잘 안씀
		
		
	1번이랑 4번만 주로 사용함
	
	
	